/**
 * This class is generated by jOOQ
 */
package com.psygate.minecraft.spigot.sovereignty.prelude.db.model.tables;


import com.psygate.minecraft.spigot.sovereignty.nucleus.sql.util.ByteBooleanConverter;
import com.psygate.minecraft.spigot.sovereignty.nucleus.sql.util.UUIDByteConverter;
import com.psygate.minecraft.spigot.sovereignty.prelude.db.model.Keys;
import com.psygate.minecraft.spigot.sovereignty.prelude.db.model.Nucleus;
import com.psygate.minecraft.spigot.sovereignty.prelude.db.model.tables.records.PreludePlayerDataRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PreludePlayerData extends TableImpl<PreludePlayerDataRecord> {

	private static final long serialVersionUID = -1034568693;

	/**
	 * The reference instance of <code>nucleus.prelude_player_data</code>
	 */
	public static final PreludePlayerData PRELUDE_PLAYER_DATA = new PreludePlayerData();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PreludePlayerDataRecord> getRecordType() {
		return PreludePlayerDataRecord.class;
	}

	/**
	 * The column <code>nucleus.prelude_player_data.puuid</code>.
	 */
	public final TableField<PreludePlayerDataRecord, UUID> PUUID = createField("puuid", org.jooq.impl.SQLDataType.BINARY.length(16).nullable(false), this, "", new UUIDByteConverter());

	/**
	 * The column <code>nucleus.prelude_player_data.break_count</code>.
	 */
	public final TableField<PreludePlayerDataRecord, Long> BREAK_COUNT = createField("break_count", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.prelude_player_data.place_count</code>.
	 */
	public final TableField<PreludePlayerDataRecord, Long> PLACE_COUNT = createField("place_count", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.prelude_player_data.meters_walked</code>.
	 */
	public final TableField<PreludePlayerDataRecord, Double> METERS_WALKED = createField("meters_walked", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

	/**
	 * The column <code>nucleus.prelude_player_data.xp_gained</code>.
	 */
	public final TableField<PreludePlayerDataRecord, Long> XP_GAINED = createField("xp_gained", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.prelude_player_data.saturation_gained</code>.
	 */
	public final TableField<PreludePlayerDataRecord, Long> SATURATION_GAINED = createField("saturation_gained", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.prelude_player_data.millis_played</code>.
	 */
	public final TableField<PreludePlayerDataRecord, Long> MILLIS_PLAYED = createField("millis_played", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.prelude_player_data.millis_tracking_month</code>.
	 */
	public final TableField<PreludePlayerDataRecord, Integer> MILLIS_TRACKING_MONTH = createField("millis_tracking_month", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>nucleus.prelude_player_data.forced_dedication</code>.
	 */
	public final TableField<PreludePlayerDataRecord, Boolean> FORCED_DEDICATION = createField("forced_dedication", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "", new ByteBooleanConverter());

	/**
	 * Create a <code>nucleus.prelude_player_data</code> table reference
	 */
	public PreludePlayerData() {
		this("prelude_player_data", null);
	}

	/**
	 * Create an aliased <code>nucleus.prelude_player_data</code> table reference
	 */
	public PreludePlayerData(String alias) {
		this(alias, PRELUDE_PLAYER_DATA);
	}

	private PreludePlayerData(String alias, Table<PreludePlayerDataRecord> aliased) {
		this(alias, aliased, null);
	}

	private PreludePlayerData(String alias, Table<PreludePlayerDataRecord> aliased, Field<?>[] parameters) {
		super(alias, Nucleus.NUCLEUS, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PreludePlayerDataRecord> getPrimaryKey() {
		return Keys.KEY_PRELUDE_PLAYER_DATA_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PreludePlayerDataRecord>> getKeys() {
		return Arrays.<UniqueKey<PreludePlayerDataRecord>>asList(Keys.KEY_PRELUDE_PLAYER_DATA_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PreludePlayerData as(String alias) {
		return new PreludePlayerData(alias, this);
	}

	/**
	 * Rename this table
	 */
	public PreludePlayerData rename(String name) {
		return new PreludePlayerData(name, null);
	}
}
